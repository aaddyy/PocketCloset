#import "imageEditorViewController.h"
#import "Pocket_Closet-Swift.h"

#import <AdobeCreativeSDKLabs/AdobeLabsUXMagicSelectionView.h>
#import <AdobeCreativeSDKCore/AdobeUXAuthManager.h>

#define CC_CLIENT_ID                @"9f756b4516444a9d8d20ea4f2cc58f60"
#define CC_CLIENT_SECRET            @"184a1df5-bf27-4be5-af5f-4d3a1732506e"

#define BUTTON_X_MARGIN             0
#define BUTTON_Y_MARGIN             20
#define BUTTON_Y_OFFSET             0
#define BUTTON_WIDTH                120
#define BUTTON_HEIGHT               40
#define VIEW_Y_OFFSET               (BUTTON_Y_MARGIN + (2*(BUTTON_Y_OFFSET+BUTTON_HEIGHT)))
#define BUTTON_TITLE_FOREGROUND     @"アイテム範囲選択"
#define BUTTON_TITLE_BACKGROUND     @"Mark Background"
#define BUTTON_TITLE_MIXED          @"Mark Mixed"
#define BUTTON_TITLE_CLEAR          @"やり直す"
#define BUTTON_TITLE_SHOW_RESULTS   @"修正画像表示"
#define BUTTON_TITLE_HIDE_RESULTS   @"画像修正に戻る"
#define BUTTON_TITLE_LOAD_PUPPY     @"画像読込"
#define BUTTON_TITLE_LOGOUT         @"Logout"
#define PUPPY_IMAGE_NAME            @"puppy.jpg"

@interface imageEditorViewController()

@end

@implementation imageEditorViewController {
AdobeLabsUXMagicSelectionView * _magicSelectionView;
UIImageView * _resultsView;
UIButton * _markForegroundButton;
UIButton * _markBackgroundButton;
UIButton * _markMixedButton;
UIButton * _showHideResultsButton;
UIButton * _loadPuppyLogoutButton;
UIButton * _clearSelectionButton;
UIColor *imageColor;
}

- (UIButton *)addButton: (NSString *)title withAction: (SEL)action withRect: (CGRect)rect {
//    imageColor = [UIColor redColor];
imageColor = [UIColor colorWithRed: 240/255 green: 150/255 blue: 155/255 alpha: 1.0];
UIButton * button = [UIButton new];
[button setTitle: title forState: UIControlStateNormal];
[button setFrame: rect];
[button addTarget:self action: action forControlEvents:UIControlEventTouchUpInside];
//button.backgroundColor = [UIColor whiteColor];
button.layer.cornerRadius = 10;
button.layer.borderColor = (__bridge CGColorRef _Nullable)(imageColor);
button.layer.borderWidth = 10.0;
button.layer.masksToBounds = true;
[button setTitleColor:imageColor forState:normal];
button.titleLabel.font = [UIFont fontWithName:@"HiraKakuProN-W3" size:16];
button.titleLabel.numberOfLines = 2;
button.titleLabel.textAlignment = NSTextAlignmentCenter;
button.tintColor = imageColor;
[self.view addSubview: button];
button.hidden = YES;
return button;
}

- (void)viewDidLoad {
[super viewDidLoad];

// first set the clientID and clientSecret
[AdobeUXAuthManager.sharedManager setAuthenticationParametersWithClientID: CC_CLIENT_ID
clientSecret: CC_CLIENT_SECRET
enableSignUp: YES];
// calculate button placement
CGRect buttonRect = CGRectMake(BUTTON_X_MARGIN, BUTTON_Y_MARGIN, BUTTON_WIDTH, BUTTON_HEIGHT);
CGFloat viewWidth = self.view.bounds.size.width;
CGFloat leftoverWidth = viewWidth - (BUTTON_X_MARGIN * 2 + BUTTON_WIDTH*3);
CGFloat interSpacing = (leftoverWidth / 2) + BUTTON_WIDTH;

//[self loadPuppyLogout];

// add the first row of buttons
//    buttonRect.origin.y = 40;
//    buttonRect.origin.x = self.view.bounds.size.width*(1/5);
//    _markForegroundButton = [self addButton: BUTTON_TITLE_FOREGROUND withAction: @selector(setBrushForeground) withRect: buttonRect];
//        let backImage = UIImage(named: imageName)!.imageWithRenderingMode(UIImageRenderingMode.AlwaysTemplate)
//        button.setImage(backImage, forState: .Normal)
//        button.imageEdgeInsets = UIEdgeInsetsMake(imageEdgeTop, imageEdgeLeft, 0, 0);
//        button.titleEdgeInsets = UIEdgeInsetsMake(titleEdgeTop, titleEdgeLeft, 0, 0);

//    _markBackgroundButton = [self addButton: BUTTON_TITLE_BACKGROUND withAction: @selector(setBrushBackground) withRect: buttonRect];
//    buttonRect.origin.x += interSpacing;
//    _markMixedButton = [self addButton: BUTTON_TITLE_MIXED withAction: @selector(setBrushMixed) withRect: buttonRect];
//    // add the second row of buttons
//    buttonRect.origin.x = BUTTON_X_MARGIN;
//    buttonRect.origin.y += buttonRect.size.height + BUTTON_Y_OFFSET;
//    buttonRect.origin.x += self.view.bounds.size.width*(1/5);
//    _showHideResultsButton = [self addButton: BUTTON_TITLE_SHOW_RESULTS withAction: @selector(showHideResults) withRect: buttonRect];
//    buttonRect.origin.x *= self.view.bounds.size.width*(1/5);
//    _loadPuppyLogoutButton = [self addButton: BUTTON_TITLE_LOAD_PUPPY withAction: @selector(loadPuppyLogout) withRect: buttonRect];
//    buttonRect.origin.x += self.view.bounds.size.width*(1/5);
//    _clearSelectionButton = [self addButton: BUTTON_TITLE_CLEAR withAction: @selector(clearSelection) withRect: buttonRect];

//    var text: String!
//    var forMultiply: CGFloat!
//    var View:UIView!
//    var target:AnyObject!
//    var action:Selector!

ForObjectiveC *forObjectiveC = [ForObjectiveC new];
forObjectiveC.text = BUTTON_TITLE_FOREGROUND;
forObjectiveC.target = self;
forObjectiveC.
forObjectiveC.setButton;
[self.view addSubview:forObjectiveC.iconButtons[0]];

// all buttons are hidden by default, show the load puppy button
_loadPuppyLogoutButton.hidden = NO;

// initialize the views to nil
_magicSelectionView = nil;
_resultsView = nil;
}

- (void)didReceiveMemoryWarning {
[super didReceiveMemoryWarning];
// Dispose of any resources that can be recreated.
}

- (void)setBrushMixed {
if (_magicSelectionView.brushMode != AdobeLabsMagicSelectionBrushModeMixed) {
_magicSelectionView.brushMode = AdobeLabsMagicSelectionBrushModeMixed;
_markMixedButton.backgroundColor = [UIColor orangeColor];
_markBackgroundButton.backgroundColor = [UIColor clearColor];
_markForegroundButton.backgroundColor = [UIColor clearColor];
}
}

- (void)setBrushBackground {
if (_magicSelectionView.brushMode != AdobeLabsMagicSelectionBrushModeBackground) {
_magicSelectionView.brushMode = AdobeLabsMagicSelectionBrushModeBackground;
_markMixedButton.backgroundColor = [UIColor clearColor];
_markBackgroundButton.backgroundColor = [UIColor orangeColor];
_markForegroundButton.backgroundColor = [UIColor clearColor];
}
}

- (void)setBrushForeground {
if (_magicSelectionView.brushMode != AdobeLabsMagicSelectionBrushModeForeground) {
_magicSelectionView.brushMode = AdobeLabsMagicSelectionBrushModeForeground;
_markMixedButton.backgroundColor = [UIColor clearColor];
_markBackgroundButton.backgroundColor = [UIColor clearColor];
_markForegroundButton.backgroundColor = [UIColor orangeColor];
}
}

- (void)clearSelection {
[_magicSelectionView clearStrokes];
}

- (void)loadPuppyLogout {
if (! _magicSelectionView)
{
// the magic selection view is not showing.  Create it and load puppy.
__unsafe_unretained typeof(self) weakSelf = self;
_magicSelectionView = [[AdobeLabsUXMagicSelectionView alloc] initWithFrame: CGRectMake(0, VIEW_Y_OFFSET, self.view.bounds.size.width, self.view.bounds.size.height-VIEW_Y_OFFSET)];

// set image may take some time (especially in the simulator) so put up a spinner
UIActivityIndicatorView *spinner = [[UIActivityIndicatorView alloc]initWithFrame:CGRectMake(
_magicSelectionView.bounds.origin.x + (_magicSelectionView.bounds.size.width / 2 - 25),
_magicSelectionView.bounds.origin.y + (_magicSelectionView.bounds.size.height / 2 - 25),
50,
50)];
spinner.color = [UIColor blueColor];
[spinner startAnimating];
[self.view addSubview:spinner];
ForObjectiveC *forObjectiveC = [ForObjectiveC new];
UIView *tempView = [[UIView alloc] initWithFrame: CGRectMake(0, 0, self.view.bounds.size.width, self.view.bounds.size.height)];
tempView.backgroundColor = [UIColor whiteColor];
[_magicSelectionView setBrushSize:50];
//[_magicSelectionView setNeedsDisplay:tempView];
[_magicSelectionView setImage: forObjectiveC.forObjectiveCimage
withCompletionBlock:^(NSError *error)
{
[spinner removeFromSuperview];

if (error)
{
// setImage failed - user failed to log in
weakSelf->_magicSelectionView = nil;
}
else
{
// success with setImage, add _magicSelectionView as subview and change button states
[weakSelf.view addSubview: weakSelf->_magicSelectionView];
weakSelf->_markForegroundButton.hidden    = NO;
weakSelf->_markBackgroundButton.hidden    = NO;
weakSelf->_markMixedButton.hidden         = NO;
weakSelf->_showHideResultsButton.hidden   = NO;
weakSelf->_clearSelectionButton.hidden    = NO;
[weakSelf->_loadPuppyLogoutButton setTitle:BUTTON_TITLE_LOGOUT forState:UIControlStateNormal];
}
}
];
}
else
{
// the magic selection view is showing.  Get rid of it and log the user out
[_magicSelectionView removeFromSuperview];
_magicSelectionView = nil;
[AdobeUXAuthManager.sharedManager logout: nil onError: nil];

// hide all of the other buttons and change my label back to load puppy
_markForegroundButton.hidden    = YES;
_markBackgroundButton.hidden    = YES;
_markMixedButton.hidden         = YES;
_showHideResultsButton.hidden   = YES;
_clearSelectionButton.hidden    = YES;
[_loadPuppyLogoutButton setTitle:BUTTON_TITLE_LOAD_PUPPY forState:UIControlStateNormal];
}
}

- (void)showHideResults {
if (_resultsView) {
// results are showing, hide results and show buttons
_markForegroundButton.hidden    = NO;
_markBackgroundButton.hidden    = NO;
_markMixedButton.hidden         = NO;
_clearSelectionButton.hidden    = NO;
_loadPuppyLogoutButton.hidden   = NO;
[_showHideResultsButton setTitle:BUTTON_TITLE_SHOW_RESULTS forState:UIControlStateNormal];
[_resultsView removeFromSuperview];
_resultsView = nil;
}
else {
// show the results
// first create a UIImage of just the foreground bits per the documentation in AdobeLabsUXMagicSelectionView.h
size_t w = _magicSelectionView.image.size.width;
size_t h = _magicSelectionView.image.size.height;

uint8_t *data = (uint8_t *)malloc(4*w*h*sizeof(uint8_t));
[_magicSelectionView readForegroundAndMatteIntoBuffer:data];

// Paint the non-selected portion of the image black
for (int i = 0; i < 4*w*h; i += 4)
{
float alpha = (float)data[i + 3] / 255;
data[i    ] *= alpha;
data[i + 1] *= alpha;
data[i + 2] *= alpha;
}
CGContextRef ctx = CGBitmapContextCreate(data, w, h, 8, 4*w, CGColorSpaceCreateDeviceRGB(), (CGBitmapInfo)kCGImageAlphaNoneSkipLast);
CGImageRef imageRef = CGBitmapContextCreateImage(ctx);
UIImage * foregroundBits = [UIImage imageWithCGImage:imageRef];
CGImageRelease(imageRef);

// show the results
_resultsView = [[UIImageView alloc] initWithFrame: CGRectMake(0, VIEW_Y_OFFSET, self.view.bounds.size.width, self.view.bounds.size.height-VIEW_Y_OFFSET)];
_resultsView.contentMode = UIViewContentModeScaleAspectFit;
[_resultsView setImage: foregroundBits];
[self.view addSubview: _resultsView];

//ここでforegroundBitsをparseに登録させたい
ForObjectiveC *forObjectiveC = [ForObjectiveC new];
forObjectiveC.forObjectiveCsave = foregroundBits;
forObjectiveC.Registration;

[_showHideResultsButton setTitle:BUTTON_TITLE_HIDE_RESULTS forState:UIControlStateNormal];



// hide the buttons
_markForegroundButton.hidden    = YES;
_markBackgroundButton.hidden    = YES;
_markMixedButton.hidden         = YES;
_clearSelectionButton.hidden    = YES;
_loadPuppyLogoutButton.hidden   = YES;
}
}



@end
